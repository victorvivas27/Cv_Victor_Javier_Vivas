---
import { basics } from "@cv";
import Section from "@/components/Section.astro";
import IconEmail from "@/icons/IconEmail.astro";
import IconPhone from "@/icons/IconPhone.astro";
import LinkedIn from "@/icons/linkedin.png";
import GitHub from "@/icons/GitHup.astro";
import Earth from "@/icons/Earth.astro";
import CertificadoDigitalHouse from "@/icons/certificadoDigital.astro";
import CertificadoJupiDigital from "@/icons/jupiDigital-02.png";
import CertificadoDesafioLatamTest from "@/icons/certificadoDesafioLatamTest.astro";
import CertificadoDesafioLatamSQL from "@/icons/certificadoDesafioLatamSQL.astro";

const { name, label, image, email, phone, url, location, profiles } = basics;
const { postalCode, city, countryCode, region } = location;

const SOCIAL_ICONS: Record<string, any> = {
  GitHub,
  LinkedIn,
  CertificadoDigitalHouse,
  CertificadoJupiDigital,
  CertificadoDesafioLatamTest,
  CertificadoDesafioLatamSQL,
};

const linkedInfo = profiles.find(({ network }) => network === "LinkedIn");
const linkedUrl = linkedInfo?.url;
const printInfo = [email, phone, linkedUrl].filter(Boolean).join(" â€¢ ");
---

<Section>
  <div class="header-container">
    <div class="header-content">
      <h1 class="header-name">{name}</h1>
      <h2 class="header-title">{label}</h2>

      <div class="header-location">
        <Earth class="location-icon" />
        <span>{city}, {region}, {countryCode}</span>
      </div>

      {postalCode && <p class="header-postal">CP: {postalCode}</p>}

      <footer class="header-contacts-print">
        {printInfo}
      </footer>

      <footer class="header-contacts">
        {
          email && (
            <a
              href={`mailto:${email}`}
              class="contact-link"
              title={`Email a ${name}`}
            >
              <IconEmail class="contact-link" />
            </a>
          )
        }
        {
          phone && (
            <a
              href={`tel:${phone}`}
              class="contact-link"
              title={`Llamar a ${name}`}
            >
              <IconPhone class="contact-link" />
            </a>
          )
        }
        {
          profiles.map(({ network, url }) => {
            const Icon = SOCIAL_ICONS[network];

            // Soporta: componente .astro/.tsx | string URL | objeto { src }
            const isUrlString = typeof Icon === "string";
            const isUrlObject =
              Icon && typeof Icon === "object" && "src" in Icon;
            const imgSrc = isUrlString ? Icon : isUrlObject ? Icon.src : null;

            return (
              Icon && (
                <a
                  href={url}
                  class="contact-link"
                  title={`${network} de ${name}`}
                >
                  {imgSrc ? (
                    <img class="contact-link" src={imgSrc} alt={network} />
                  ) : (
                    <Icon />
                  )}
                </a>
              )
            );
          })
        }
      </footer>
    </div>

    <figure class="header-avatar">
      <img src={image} alt={`Foto de ${name}`} />
    </figure>
  </div>
</Section>

<style>
  :root {
    --primary-color: #0051ff;
    --text-color: #1e293b;
    --text-secondary: #64748b;
    --border-color: #e2e8f0;
    --hover-bg: #f1f5f9;
    --avatar-size-desktop: 180px;
    --avatar-size-mobile: 150px;
    --transition-speed: 0.2s;
  }

  .header-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
  }

  .header-title {
    font-size: 1.6rem;
    font-weight: 450;
    color: var(--primary-color);
    margin: 0;
  }

  .header-location {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }

  .header-postal {
    color: var(--text-secondary);
    font-size: 0.85rem;
    margin: 0;
  }

  .header-contacts {
    display: flex;
    justify-content: space-evenly;
    
   margin:0.8rem;
    flex-wrap: wrap;
  }

  .contact-link {
    width: 2.8rem;
    height: 2.5rem;
    border-radius: 5px;
    border: 2px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;

    transition: all var(--transition-speed) ease;
  }

  .contact-link:hover {
    background: var(--hover-bg);
    transform: translateY(-2px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .header-avatar {
    width: var(--avatar-size-desktop);
    height: var(--avatar-size-desktop);
    border-radius: 50%;
    overflow: hidden;
    border: 3px solid rgb(65, 224, 2);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    /* Aligned avatar to the right on larger screens */
    margin-left: auto;
  }

  .header-avatar:hover {
    transform: scale(1.03);
  }

  .header-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  /* For printing */
  .header-contacts-print {
    display: none;
    font-size: 0.8rem;
    color: var(--text-secondary);
  }

  /* Mobile-specific styles */
  @media (max-width: 700px) {
    .header-container {
      flex-direction: column;
      text-align: center;
      align-items: center;
    }

    .header-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-bottom: 1rem;
    }

    .header-location {
      justify-content: center;
    }

    .header-name {
      font-size: 1.5rem;
    }

    .header-title {
      font-size: 1rem;
    }

    .header-avatar {
      width: var(--avatar-size-mobile);
      height: var(--avatar-size-mobile);
    }

    .header-contacts {
      justify-content: center;
    }
  }

  @media print {
    .header-contacts {
      display: none;
    }
    .header-contacts-print {
      display: block;
      margin-top: 0.3rem;
    }
    .header-avatar {
      display: none;
    }
    .header-name {
      font-size: 1.2rem;
    }
    .header-title {
      font-size: 1rem;
      margin-top: 0.2rem;
    }
    .header-location,
    .header-postal {
      font-size: 0.7rem;
    }
  }
</style>
